{
    "name":"Punk",
    "scopeName":"source.punk",
    "fileTypes":["punk"],
    "patterns":[
        {"include": "#comment"},
        {"include": "#string"},
        {"include": "#number"},
        {"include": "#register"},
        {"include": "#memory"},
        {"include": "#keyword"},
        {"include": "#keyword.macro"},
        {"include": "#variable"},
        {"include": "#label"},
        {"include": "#parameter"},
        {"include": "#statement"}
    ],
    "repository":{
        "comment": {
            "match": "(?:^|\\s+)(#[^\\$].*)",
            "captures": {
                "1": {
                    "name": "comment"
                }
            }
        },
        "string": {
            "begin": "\"",
            "end": "\"",
            "name": "string"
        },
        "number": {
            "patterns": [
                {
                    "match": "\\b-?(0[xX]|\\d+'[hH])[\\da-fA-F_]+\\b",
                    "name": "constant.numeric.hex"
                },
                {
                    "match": "\\b-?(0[bB]|\\d+'[bB])[01_]+\\b",
                    "name": "constant.numeric.bin"
                },
                {
                    "match": "\\b-?(0[oO]|\\d+'[oO])[0-7_]+\\b",
                    "name": "constant.numeric.oct"
                },
                {
                    "match": "\\b-?(0[dD]|\\d+'[dD])?[\\d_]+\\b",
                    "name": "constant.numeric.dec"
                }
            ]
        },
        "register": {
            "match": "\\bR\\d+\\b",
            "name": "variable.reg.punk"
        },
        "memory": {
            "match": "\\bM\\d+\\b",
            "name": "entity.name.tag.mem.punk"
        },
        "keyword": {
            "match": "\\b(mov|to|from|shift|keep|add|sub|shr|shl|and|or|xor|not|cmp|jmp|jeq|jne|jlt|jle|jgt|jge|if|wait|trigger|high|low|rise|fall|abs|rel|ticks|delay|data|read|write|fetch|frame|hmask|vmask|rev|exit|print|load|store|otp|id|rewind|home|break|slide|heater|otd|outsel|tempcal|region|zone|tempctrl|global|occl)\\b",
            "name": "keyword"
        },
        "keyword.macro": {
            "match": "(^|\\s)\\.(while|if|forever|else|elif|break)\\b",
            "name": "markup.bold.macro.punk"
        },
        "variable": {
            "match": "\\$\\w+\\b",
            "name": "constant.regexp.define.punk"
        },
        "label": {
            "match": "@\\w+\\b",
            "name": "entity.name.label.punk"
        },
        "parameter": {
            "match": "\\b[A-Z_0-9]+\\b",
            "name": "entity.name.type.param.punk"
        },
        "statement": {
            "patterns": [
                {
                    "begin": "\\$\\{",
                    "end": "\\}",
                    "name": "statement.template",
                    "beginCaptures": {
                        "0": { "name": "keyword.operator.stmt.tpl.punk" }
                    },
                    "endCaptures": {
                        "0": { "name": "keyword.operator.stmt.tpl.punk" }
                    },
                    "patterns": [
                        {
                            "include": "#number"
                        },
                        {
                            "match": "\\b\\w+\\b",
                            "name": "string.regexp.var.tpl.punk"
                        }
                    ]
                },
                {
                    "begin": "^#\\$",
                    "end": "$",
                    "name": "statement.template",
                    "beginCaptures": {
                        "0": { "name": "keyword.operator.stmt.tpl.punk" }
                    },
                    "endCaptures": {
                        "0": { "name": "keyword.operator.stmt.tpl.punk" }
                    },
                    "patterns": [
                        {
                            "match": "\\b(if|else|endif|for|in|at|sep|endfor)\\b",
                            "name": "string.regexp.var.tpl.punk"
                        },
                        {
                            "include": "#number"
                        },
                        {
                            "match": "\\b\\w+\\b",
                            "name": "string.regexp.var.tpl.punk"
                        }
                    ]
                }
            ]
        }
    }
}
