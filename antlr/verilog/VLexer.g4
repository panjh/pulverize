lexer grammar VLexer;

// channels 0->NORMAL 1->SPACE 2->DIRECTIVE 3->COMMENTS

EM : '!' ;
EMEQ : '!=' ;
EMEQEQ : '!==' ;
DQ : '"' ;
HA : '#' ;
DL : '$' ;
DLFULLSKEW : '$fullskew' ;
DLHOLD : '$hold' ;
DLNOCHANGE : '$nochange' ;
DLPERIOD : '$period' ;
DLRECOVERY : '$recovery' ;
DLRECREM : '$recrem' ;
DLREMOVAL : '$removal' ;
DLSETUP : '$setup' ;
DLSETUPHOLD : '$setuphold' ;
DLSKEW : '$skew' ;
DLTIMESKEW : '$timeskew' ;
DLWIDTH : '$width' ;
MO : '%' ;
AM : '&' ;
AMAM : '&&' ;
AMAMAM : '&&&' ;
AP : '\'' ;
LP : '(' ;
RP : ')' ;
AS : '*' ;
ASAS : '**' ;
ASSL : '*/' ;
ASGT : '*>' ;
PL : '+' ;
PLCL : '+:' ;
CO : ',' ;
MI : '-' ;
MICL : '-:' ;
MIGT : '->' ;
DT : '.' ;
SL : '/' ;
SLAS : '/*' ;
SLSL : '//' ;
CL : ':' ;
SC : ';' ;
LT : '<' ;
LTLT : '<<' ;
LTLTLT : '<<<' ;
LTEQ : '<=' ;
EQ : '=' ;
EQEQ : '==' ;
EQEQEQ : '===' ;
EQGT : '=>' ;
GT : '>' ;
GTEQ : '>=' ;
GTGT : '>>' ;
GTGTGT : '>>>' ;
QM : '?' ;
AT : '@' ;
PATHPULSEDL : 'PATHPULSE$' ;
LB : '[' ;
RB : ']' ;
CA : '^' ;
CATI : '^~' ;
ALWAYS : 'always' ;
AND : 'and' ;
ASSIGN : 'assign' ;
AUTOMATIC : 'automatic' ;
BEGIN : 'begin' ;
BUF : 'buf' ;
BUFIFZERO : 'bufif0' ;
BUFIFONE : 'bufif1' ;
CASE : 'case' ;
CASEX : 'casex' ;
CASEZ : 'casez' ;
CELL : 'cell' ;
CMOS : 'cmos' ;
CONFIG : 'config' ;
DEASSIGN : 'deassign' ;
DEFAULT : 'default' ;
DEFPARAM : 'defparam' ;
DESIGN : 'design' ;
DISABLE : 'disable' ;
EDGE : 'edge' ;
ELSE : 'else' ;
END : 'end' ;
ENDCASE : 'endcase' ;
ENDCONFIG : 'endconfig' ;
ENDFUNCTION : 'endfunction' ;
ENDGENERATE : 'endgenerate' ;
ENDMODULE : 'endmodule' ;
ENDPRIMITIVE : 'endprimitive' ;
ENDSPECIFY : 'endspecify' ;
ENDTABLE : 'endtable' ;
ENDTASK : 'endtask' ;
EVENT : 'event' ;
FOR : 'for' ;
FORCE : 'force' ;
FOREVER : 'forever' ;
FORK : 'fork' ;
FUNCTION : 'function' ;
GENERATE : 'generate' ;
GENVAR : 'genvar' ;
HIGHZZERO : 'highz0' ;
HIGHZONE : 'highz1' ;
IF : 'if' ;
IFNONE : 'ifnone' ;
INCLUDE : 'include' ;
INITIAL : 'initial' ;
INOUT : 'inout' ;
INPUT : 'input' ;
INSTANCE : 'instance' ;
INTEGER : 'integer' ;
STRING : 'string' ;
INT : 'int' ;
SHORTINT : 'shortint' ;
LONGINT : 'longint' ;
UNSIGNED : 'unsigned' ;
VOID : 'void' ;
JOIN : 'join' ;
LARGE : 'large' ;
LIBLIST : 'liblist' ;
LIBRARY : 'library' ;
LOCALPARAM : 'localparam' ;
MACROMODULE : 'macromodule' ;
MEDIUM : 'medium' ;
MODULE : 'module' ;
NAND : 'nand' ;
NEGEDGE : 'negedge' ;
NMOS : 'nmos' ;
NOR : 'nor' ;
NOSHOWCANCELLED : 'noshowcancelled' ;
NOT : 'not' ;
NOTIFZERO : 'notif0' ;
NOTIFONE : 'notif1' ;
OR : 'or' ;
OUTPUT : 'output' ;
PARAMETER : 'parameter' ;
PMOS : 'pmos' ;
POSEDGE : 'posedge' ;
PRIMITIVE : 'primitive' ;
PULLZERO : 'pull0' ;
PULLONE : 'pull1' ;
PULLDOWN : 'pulldown' ;
PULLUP : 'pullup' ;
PULSESTYLE_ONDETECT : 'pulsestyle_ondetect' ;
PULSESTYLE_ONEVENT : 'pulsestyle_onevent' ;
RCMOS : 'rcmos' ;
REAL : 'real' ;
REALTIME : 'realtime' ;
REG : 'reg' ;
LOGIC: 'logic' ;
BIT: 'bit' ;
RELEASE : 'release' ;
REPEAT : 'repeat' ;
RNMOS : 'rnmos' ;
RPMOS : 'rpmos' ;
RTRAN : 'rtran' ;
RTRANIFZERO : 'rtranif0' ;
RTRANIFONE : 'rtranif1' ;
SCALARED : 'scalared' ;
SHOWCANCELLED : 'showcancelled' ;
SIGNED : 'signed' ;
SMALL : 'small' ;
SPECIFY : 'specify' ;
SPECPARAM : 'specparam' ;
STRONGZERO : 'strong0' ;
STRONGONE : 'strong1' ;
SUPPLYZERO : 'supply0' ;
SUPPLYONE : 'supply1' ;
TABLE : 'table' ;
TASK : 'task' ;
IMPORT : 'import' ;
EXPORT : 'export' ;
CONTEXT : 'context' ;
TIME : 'time' ;
TRAN : 'tran' ;
TRANIFZERO : 'tranif0' ;
TRANIFONE : 'tranif1' ;
TRI : 'tri' ;
TRIZERO : 'tri0' ;
TRIONE : 'tri1' ;
TRIAND : 'triand' ;
TRIOR : 'trior' ;
TRIREG : 'trireg' ;
USE : 'use' ;
UWIRE : 'uwire' ;
VECTORED : 'vectored' ;
WAIT : 'wait' ;
WAND : 'wand' ;
WEAKZERO : 'weak0' ;
WEAKONE : 'weak1' ;
WHILE : 'while' ;
WIRE : 'wire' ;
WOR : 'wor' ;
XNOR : 'xnor' ;
XOR : 'xor' ;
LC : '{' ;
VL : '|' ;
VLVL : '||' ;
RC : '}' ;
TI : '~' ;
TIAM : '~&' ;
TICA : '~^' ;
TIVL : '~|' ;
DECIMAL_NUMBER : ( SIZE? DECIMAL_BASE )? UNSIGNED_NUMBER | SIZE? DECIMAL_BASE ( X_DIGIT | Z_DIGIT ) '_'* ;
BINARY_NUMBER : SIZE? BINARY_BASE BINARY_VALUE ;
OCTAL_NUMBER : SIZE? OCTAL_BASE OCTAL_VALUE ;
HEX_NUMBER : SIZE? HEX_BASE HEX_VALUE ;
fragment SIGN : [+\-] ;
fragment SIZE : NON_ZERO_UNSIGNED_NUMBER ;
fragment NON_ZERO_UNSIGNED_NUMBER : NON_ZERO_DECIMAL_DIGIT ( '_' | DECIMAL_DIGIT )* ;
REAL_NUMBER : UNSIGNED_NUMBER '.' UNSIGNED_NUMBER | UNSIGNED_NUMBER ( '.' UNSIGNED_NUMBER )? EXP SIGN? UNSIGNED_NUMBER ;
fragment EXP : [eE] ;
fragment UNSIGNED_NUMBER : DECIMAL_DIGIT ( '_' | DECIMAL_DIGIT )* ;
fragment BINARY_VALUE : BINARY_DIGIT ( '_' | BINARY_DIGIT )* ;
fragment OCTAL_VALUE : OCTAL_DIGIT ( '_' | OCTAL_DIGIT )* ;
fragment HEX_VALUE : HEX_DIGIT ( '_' | HEX_DIGIT )* ;
fragment DECIMAL_BASE : '\'' [sS]? [dD] ;
fragment BINARY_BASE : '\'' [sS]? [bB] ;
fragment OCTAL_BASE : '\'' [sS]? [oO] ;
fragment HEX_BASE : '\'' [sS]? [hH] ;
fragment NON_ZERO_DECIMAL_DIGIT : [1-9] ;
fragment DECIMAL_DIGIT : [0-9] ;
fragment BINARY_DIGIT : [01] | X_DIGIT | Z_DIGIT ;
fragment OCTAL_DIGIT : [0-7] | X_DIGIT | Z_DIGIT ;
fragment HEX_DIGIT : [0-9a-fA-F] | X_DIGIT | Z_DIGIT ;
fragment X_DIGIT : [xX] ;
fragment Z_DIGIT : [zZ?] ;
STRING_LITERAL : '"' ( ~["\\] | ESC_SEQ )*? '"' ;
fragment ESC_SEQ : '\\' . ;
COMMENT : ( ONE_LINE_COMMENT | BLOCK_COMMENT) -> channel(3) ;
fragment ONE_LINE_COMMENT : '//' COMMENT_TEXT NEWLINE ;
fragment BLOCK_COMMENT : '/*' COMMENT_TEXT '*/' ;
fragment COMMENT_TEXT : ASCII_ANY*?;
fragment NEWLINE : '\r'? '\n' ;
ESCAPED_IDENTIFIER : '\\' ASCII_PRINTABLE_EXCEPT_SPACE* WHITE_SPACE ;
SIMPLE_IDENTIFIER : [a-zA-Z_] [a-zA-Z0-9_$]* ;
SYSTEM_TF_IDENTIFIER : '$' [a-zA-Z0-9_$][a-zA-Z0-9_$]* ;
WHITE_SPACE : [ \t\r\n]+ -> channel(1) ;
fragment ASCII_ANY : [\u0000-\uffff] ;
fragment ASCII_PRINTABLE : [\u0020-\u007e] ;
fragment ASCII_PRINTABLE_EXCEPT_SPACE : [\u0021-\u007e] ;

INCLUDE_DIRECTIVE : '`include' -> channel(2) ;
DEFINE_DIRECTIVE : '`define' -> channel(2), mode(DEFINE_DIRECTIVE_MODE) ;
UNDEF_DIRECTIVE : '`undef' -> channel(2) ;
IFDEF_DIRECTIVE : '`ifdef' -> channel(2) ;
IFNDEF_DIRECTIVE : '`ifndef' -> channel(2) ;
ELSIF_DIRECTIVE : '`elsif' -> channel(2) ;
ELSE_DIRECTIVE : '`else' -> channel(2) ;
ENDIF_DIRECTIVE : '`endif' -> channel(2) ;
BEGIN_KEYWORDS_DIRECTIVE : '`begin_keywords' -> channel(2), mode(IGNORE_MODE) ;
END_KEYWORDS_DIRECTIVE : '`end_keywords' -> channel(2), mode(IGNORE_MODE) ;
CELLDEFINE_DIRECTIVE : '`celldefine' -> channel(2), mode(IGNORE_MODE) ;
ENDCELLDEFINE_DIRECTIVE : '`endcelldefine' -> channel(2), mode(IGNORE_MODE) ;
DEFAULT_NETTYPE_DIRECTIVE : '`default_nettype' -> channel(2), mode(IGNORE_MODE) ;
LINE_DIRECTIVE : '`line' -> channel(2), mode(IGNORE_MODE) ;
PRAGMA_DIRECTIVE : '`pragma' -> channel(2), mode(IGNORE_MODE) ;
RESETALL_DIRECTIVE : '`resetall' -> channel(2), mode(IGNORE_MODE) ;
TIMESCALE_DIRECTIVE : '`timescale' -> channel(2), mode(IGNORE_MODE) ;
NOUNCONNECTED_DRIVE_DIRECTIVE : '`nounconnected_drive' -> channel(2), mode(IGNORE_MODE) ;
UNCONNECTED_DRIVE_DIRECTIVE : '`unconnected_drive' -> channel(2), mode(IGNORE_MODE) ;

MACRO_USAGE : '`' [a-zA-Z_] [a-zA-Z0-9_$]* -> channel(2) ;

mode IGNORE_MODE;
DIRECTIVE_TEXT : COMMENT_TEXT NEWLINE -> channel(2), mode(DEFAULT_MODE) ;

mode DEFINE_DIRECTIVE_MODE;
DIRECTIVE_COMMENT : COMMENT -> channel(1) ;
DIRECTIVE_WHITE_SPACE : [ \t]+ -> channel(1) ;
DIRECTIVE_NEWLINE : NEWLINE -> channel(1) ;
DIRECTIVE_IDENTIFIER : [a-zA-Z_] [a-zA-Z0-9_$]* -> channel(2), mode(MACRO_TEXT_MODE) ;

mode MACRO_TEXT_MODE;
MACRO_WHITE_SPACE: [ \t]+ -> channel(2) ;
MACRO_TEXT : ~[ \t\r\n\\]+ -> channel(2) ;
MACRO_ESC_NEWLINE : '\\' NEWLINE -> channel(2) ;
MACRO_ESC_SEQ : ESC_SEQ -> channel(2) ;
MACRO_NEWLINE : NEWLINE -> channel(2), mode(DEFAULT_MODE) ;
